Q4 - Assume all method calls work fine. Fix the memory leak issue in below method

void Game::addItemToPlayer(const std::string& recipient, uint16_t itemId)
{
    Player* player = g_game.getPlayerByName(recipient);
	if (!player) {
		player = new Player(nullptr);
		if (!IOLoginData::loadPlayerByName(player, recipient)) {
		    return;
	   }
    }

	Item* item = Item::CreateItem(itemId);
	if (!item) {
		return;
	}

	g_game.internalAddItem(player->getInbox(), item, INDEX_WHEREEVER, FLAG_NOLIMIT);

	if (player->isOffline()) {
	    IOLoginData::savePlayer(player);
	}
}

// ===Q4 sol:===
// if the player pointer points to a new allocation
//  -  free player object whenever the function ends.

void Game::addItemToPlayer(const std::string& recipient, uint16_t itemId)
{
    Player* player = g_game.getPlayerByName(recipient);
	bool isNewPlayer = false;
	if (!player) {
		player = new Player(nullptr);
		isNewPlayer = true;
		if (!IOLoginData::loadPlayerByName(player, recipient)) {
			delete player;
		    return;
	   }
    }

	Item* item = Item::CreateItem(itemId);
	if (!item) {
		if (isNewPlayer) {
			delete player;
		}
		return;
	}

	g_game.internalAddItem(player->getInbox(), item, INDEX_WHEREEVER, FLAG_NOLIMIT);

	if (player->isOffline()) {
	    IOLoginData::savePlayer(player);
	}
	
	if (isNewPlayer) {
		delete player;
	}
}
